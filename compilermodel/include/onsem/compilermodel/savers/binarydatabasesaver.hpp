#ifndef ONSEM_COMPILERMODEL_SAVERS_BINARYDATABASESAVER_HPP
#define ONSEM_COMPILERMODEL_SAVERS_BINARYDATABASESAVER_HPP

#include <cstddef>
#include <onsem/common/binary/binarysaver.hpp>

namespace onsem
{
class LingdbString;
class LingdbDynamicTrieNode;


class BinaryDatabaseSaver
{
protected:
  /// The formalism of the binary database file generated by this saver.
  static const int fFormalism;

  virtual ~BinaryDatabaseSaver() {}


  binarymasks::Ptr xWriteString
  (binarymasks::Ptr pEndMemory,
   const LingdbString* pString) const;


  template<typename T>
  binarymasks::Ptr xCreateRootNode
  (T& pTreeCreationWorkState,
   LingdbDynamicTrieNode* pNode,
   const binarymasks::Ptr pBeginMemory, binarymasks::Ptr pEndMemory) const;


  template<typename T>
  binarymasks::Ptr xIterateOnChildren
  (T& pTreeCreationWorkState,
   int pParentPtr,
   LingdbDynamicTrieNode* pNode,
   const binarymasks::Ptr pBeginMemory,
   binarymasks::Ptr pChildPtr,
   binarymasks::Ptr pEndMemory) const;


  template<typename T>
  binarymasks::Ptr xAddANode
  (T& pTreeCreationWorkState,
   int pParentPtr,
   LingdbDynamicTrieNode* pNode,
   const binarymasks::Ptr pBeginMemory,
   binarymasks::Ptr pEndMemory) const;


  /**
   * @brief Get the maximum number of the letters we can store inside a specific node.
   * @param pNode The node.
   * @return The maximum number of the letters we can store inside the node.
   */
  unsigned char xMaxNbOfLettersInTheNode
  (LingdbDynamicTrieNode* pNode) const;
};

} // End of namespace onsem

#include "details/binarydatabasesaver.hxx"


#endif // ONSEM_COMPILERMODEL_SAVERS_BINARYDATABASESAVER_HPP
