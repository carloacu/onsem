#ifndef ALBINARYDATABASESAVER_H
#define ALBINARYDATABASESAVER_H

#include <cstddef>
#include <boost/filesystem/fstream.hpp>
#include <onsem/common/binary/binarysaver.hpp>

namespace onsem
{
class ALLingdbString;
class ALLingdbDynamicTrieNode;


class ALBinaryDatabaseSaver
{
protected:
  /// The formalism of the binary database file generated by this saver.
  static const int fFormalism;

  virtual ~ALBinaryDatabaseSaver() {}


  binarymasks::Ptr xWriteString
  (binarymasks::Ptr pEndMemory,
   const ALLingdbString* pString) const;


  template<typename T>
  binarymasks::Ptr xCreateRootNode
  (T& pTreeCreationWorkState,
   ALLingdbDynamicTrieNode* pNode,
   const binarymasks::Ptr pBeginMemory, binarymasks::Ptr pEndMemory) const;


  template<typename T>
  binarymasks::Ptr xIterateOnChildren
  (T& pTreeCreationWorkState,
   int pParentPtr,
   ALLingdbDynamicTrieNode* pNode,
   const binarymasks::Ptr pBeginMemory,
   binarymasks::Ptr pChildPtr,
   binarymasks::Ptr pEndMemory) const;


  template<typename T>
  binarymasks::Ptr xAddANode
  (T& pTreeCreationWorkState,
   int pParentPtr,
   ALLingdbDynamicTrieNode* pNode,
   const binarymasks::Ptr pBeginMemory,
   binarymasks::Ptr pEndMemory) const;


  /**
   * @brief Get the maximum number of the letters we can store inside a specific node.
   * @param pNode The node.
   * @return The maximum number of the letters we can store inside the node.
   */
  unsigned char xMaxNbOfLettersInTheNode
  (ALLingdbDynamicTrieNode* pNode) const;
};

} // End of namespace onsem

#include "details/albinarydatabasesaver.hxx"


#endif // ALBINARYDATABASESAVER_H
